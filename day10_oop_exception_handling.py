# -*- coding: utf-8 -*-
"""Day 10

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13EM_Ikclef6EXG4aJ0TCc8xtCUJlwe7j

# Day 10 - OOP Basics & Exception Handling

üëã Today I learned about:
1. **Object-Oriented Programming (OOP)** ‚Üí Classes & Objects  
2. **Exception Handling** ‚Üí catching and managing errors in programs  

At the end, I built a **Mini Project: Bank Account System**.
"""

# üìå Simple Class and Object Example

class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def start(self):
        print(f"{self.brand} {self.model} is starting !")


car1 = Car("Tesla", "Model S")
car2 = Car("BMW", "X5")

car1.start()
car2.start()

# # # __init__ = Runs when object is born (like filling birth certificate),like filling some basic information like name,parents details
# # # self = Means "this specific object" (like saying "my" or "myself")
# # # start() = A function/action the object can do (like pressing start button)
# # # show_info() = A function to display object's details (like reading ID card)
# # self.color = color    # THIS car's color is what you told me
# # self.brand = brand    # THIS car's brand is what you told me
# The plus-equals operator += provides a convenient way to add a value to an existing variable and assign the new value back to the same variable

"""## ‚ö†Ô∏è Exception Handling in Python

Errors can stop a program, but with **try/except**,  
we can handle them and keep the program running.

"""

try:
    num = int(input("Enter a number: "))
    result = 10 / num
    print("Result:", result)
except ValueError:
    print(" Please enter a valid number.")
except ZeroDivisionError:
    print(" Cannot divide by zero.")

# üèãÔ∏è Mini Project - Bank Account System

class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"‚úÖ Deposited {amount}. New Balance: {self.balance}")
        else:
            print("‚ùå Deposit amount must be positive.")

    def withdraw(self, amount):
        try:
            if amount > self.balance:
                raise ValueError("Insufficient funds ‚ùå")
            elif amount <= 0:
                raise ValueError("Withdrawal amount must be positive ‚ùå")
            else:
                self.balance -= amount
                print(f"‚úÖ Withdrawn {amount}. New Balance: {self.balance}")
        except ValueError as e:
            print(e)

    def show_balance(self):
        print(f"üí∞ Account Balance: {self.balance}")


# Using the class
account = BankAccount("Rithwik", 5000)

account.show_balance()
account.deposit(2000)
account.withdraw(1000)
account.withdraw(7000)  # Testing insufficient funds

"""## üèãÔ∏è Mini Project - Bank Account System

This project simulates a simple bank account with:
- Deposit money
- Withdraw money (with balance check)
- Show account balance
- Error handling for invalid inputs


"""

# üèãÔ∏è Mini Project - Bank Account System
class bankaccount():
  def __init__(self,owner,balance):
    self.owner = owner
    self.balance = balance

  def deposit(self,amount):
      if amount > 0:

          self.balance += amount
          print(f"Deposited {amount},New balance:{self.balance}")
      else:

          print(f"Deposit amount must be positive")

  def withdraw(self,amount):

      try:
          if amount > self.balance:
              raise ValueError("Insufficient funds")
          elif amount <= 0:
              raise ValueError("Withdrawn amount must be positive")
          else:
              self.balance -= amount
              print(f"Withdrawn {amount}, New balance:{self.balance}")
      except ValueError as e:
          print(e)

  def show_balance(self):
      print(f"Account balance: {self.balance}")

account = bankaccount("Rithwik",5000)

account.show_balance()
account.deposit(1000)
account.withdraw(2000)
account.withdraw(7000)

"""## ‚úÖ Summary

In this notebook, I learned:
- How to create **classes and objects** in Python
- The role of the `__init__` constructor
- How to handle errors with `try/except`
- Built a **Bank Account System** mini project

This is my **Day 10 progress** in the #100DaysOfCode challenge.  
Uploaded to GitHub as part of my learning portfolio.


"""