# -*- coding: utf-8 -*-
"""Day 11

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JeIn0Jeea_tqlGUjW1EORMF4JgMlanG5

# Day 11 - Python Modules & Packages

👋 Today I learned about:
1. **Modules** → Files containing Python code (functions, variables, classes) that can be reused  
2. **Built-in Modules** → Pre-installed modules in Python (like `math`, `random`, `datetime`)  
3. **User-defined Modules** → Creating my own modules and importing them  
4. **Packages** → A collection of modules, organized like folders  

At the end, I built a **Mini Project: Calculator using Modules**.

## 📌 What are Modules?

- A **module** is just a Python file (`.py`) that contains code (functions, variables, classes).  
- Instead of writing everything in one file, we can split logic into **modules** and `import` them into other programs.  
- This makes code **reusable, organized, and professional**.
"""

# 📌 Using Built-in Modules

import math
import random
import datetime

print("square root of 25 :", math.sqrt(25))

print("random number between 1 to 100 :",random.randint(1,100)

today = datetime.date.today()
print("today's date :", today)

"""## 🛠️ Creating My Own Module

Steps:
1. Create a new Python file (example: `mymath.py`)
2. Write some functions inside it
3. Import it into another file using `import`

👉 This simulates how developers structure real projects.

"""

# Commented out IPython magic to ensure Python compatibility.
# # 📌 mymath.py (this will be a separate file)
# %%writefile mymath.py
# def add(a, b):
#     return a + b
# 
# def subtract(a, b):
#     return a - b
# 
# def multiply(a, b):
#     return a * b
# 
# def divide(a, b):
#     if b == 0:
#         return "❌ Cannot divide by zero"
#     return a / b
#

import mymath

print("Add:", mymath.add(10, 5))
print("Subtract:", mymath.subtract(10, 5))
print("Multiply:", mymath.multiply(10, 5))
print("Divide:", mymath.divide(10, 0))

"""## 📦 What are Packages?

- A **package** is a collection of modules, stored in a folder.  
- Example folder structure:


"""

# mypackage/
# │
# ├── init.py (makes this folder a package)
# ├── math_tools.py
# ├── string_tools.py

# - Then we can import like this:

# from mypackage import math_tools

"""## 🏋️ Mini Project - Calculator using Modules

I will create:
1. A `mymath.py` module with arithmetic functions  
2. A main script that imports it  
3. User can choose operations like Add, Subtract, Multiply, Divide  



"""

# 🏋️ Mini Project - Calculator using mymath Module

import mymath

print("===== Calculator =====")
print("1. Add")
print("2. Subtract")
print("3. Multiply")
print("4. Divide")

choice = int(input("Enter choice (1-4): "))
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

if choice == 1:
    print("Result:", mymath.add(a, b))
elif choice == 2:
    print("Result:", mymath.subtract(a, b))
elif choice == 3:
    print("Result:", mymath.multiply(a, b))
elif choice == 4:
    print("Result:", mymath.divide(a, b))
else:
    print("❌ Invalid choice")

"""## ✅ Summary

In this notebook, I learned:
- The concept of **modules** (built-in & user-defined)
- How to create and import my own Python module
- What **packages** are and how they organize code
- Built a **Calculator project using a custom module**

This is my **Day 11 progress** in the #100DaysOfCode challenge.  
Uploaded to GitHub as part of my learning portfolio.

"""